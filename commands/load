#!/usr/bin/env bash
# shellcheck disable=SC2034 shell=bash

set -eo pipefail
IFS=$'\n\t'

[[ "${DEBUG:-}" == 'true' ]] && set -x

# shellcheck disable=SC1090
. "$(dirname "${0}")/common.sh"

# This should be at the top but common.sh throws an error when used
set -u

# Options:
# compression gzip|lz4|bz2|zip|none
# dateformat %Y%m%d%H%M%S
# checksum sha256
# umask 0077
# dest gs://|s3://|file://
# databases ALL

gsutil_auth() {
  if [[ -n "${SKIP_GSUIT_AUTH:-}" ]]; then
    return
  elif [[ -n "${GOOGLE_APPLICATION_CREDENTIALS:-}" ]]; then
    # if GOOGLE_APPLICATION_CREDENTIALS is set with a service account key
    printf "%s\n" \
      "[Credentials]" \
      "gs_service_key_file = ${GOOGLE_APPLICATION_CREDENTIALS}" > /etc/boto.cfg
  elif curl --max-time 2 -sSf 'http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/' -H "Metadata-Flavor: Google"; then
    # if GCE metadata is set and a default service-account is present
    printf "%s\n" \
      "[Credentials]" \
      "service_account = default" > /etc/boto.cfg
  fi
}

parse_options() {

    # For reference these are the relevant parameters that mysql command accepts
    #   -h, --host=name     Connect to host.
    #   -p, --password[=name] 
    #   -P, --port=#        Port number to use for connection or 0 for default to, in
    #   -u, --user=name     User for login if not current user.
    #   -D, --database=name Database to use.

    # We don't want to pass these back to the caller
    local password
    local password_file

    # Pull in environment variables prefixed with DATABASE_
    for item in host port user database password password_file; do
        local varname
        varname="DATABASE_${item^^}"
        if [[ -n "${!varname:-}" ]]; then
          eval ${item}="${!varname}"
        fi
    done

    # Pull in environment variables prefixed with LOAD_
    # LOAD_SKIP_DATABASES should be comma separated
    for item in compression skip_databases; do
        local varname
        varname="LOAD_${item^^}"
        if [[ -n "${!varname:-}" ]]; then
          eval ${item}="${!varname}"
        fi
    done

    # If skip_databases was set via env var, split into an array
    if [[ -n "${skip_databases:-}" ]]; then
        IFS=',' read -r -a skip_databases <<< "${skip_databases}"
    fi

    # Options and long options
    local options="h:P:u:D:p:"
    local longopts="host:,port:,user:,database:,password:,password-file:,compression:,skip-database:,umark:,sed:"
    local parsed

    # Parse with getopt (not getopts)
    ! parsed=$(getopt --quiet --options=${options} --longoptions=${longopts} --name "${0}" -- "${@}")
    eval set -- "${parsed}"
    while true; do
      case "${1}" in
        -h|--host)
          host="${2}"
          shift 2
          ;;
        -P|--port)
          port="${2}"
          shift 2
          ;;
        -u|--user)
          user="${2}"
          shift 2
          ;;
        -D|--database)
          database="${2}"
          shift 2
          ;;
        -p|--password)
          password="${2}"
          shift 2
          ;;
        --password-file)
          password_file="${2}"
          shift 2
          ;;
        --skip-database)
          skip_databases+=( "${2}" )
          shift 2
          ;;
        --compression)
          compression="${2}"
          shift 2
          ;;
        --umark)
          umark="${2}"
          shift 2
          ;;
        --sed)
          sed+=( "${2}" )
          shift 2
          ;;
        --)
          shift
          break
          ;;
        *)
          echo "Unrecognised option"
          exit 3
          ;;
      esac
    done

    # Set remaining command line arguments into an array
    args=( "${@}" )

    # Read in the password file if set
    if [[ -n "${password_file:-}" ]]; then
        # Read password file if set on the command line or DATABASE_PASSWORD_FILE
        password="$(cat "${password_file}")"
    fi
 
    # If the password was set write it to .my.cnf (or save a temporary file and set --defaults-extra-file)
    # Note: --defaults-extra-file must be specified first on the mysql command line
    # TODO: add trap to clean up the temp file
    if [[ -n "${password:-}" ]]; then
        local old_umask
        old_umask="$(umask)"
        umask 0077
        defaults_extra_file="$(mktemp)"
        printf "%s\n" \
          "[client]" \
          "password=${password}" > "${defaults_extra_file}"
        umask "${old_umask}"
        echoerr ">>> Password written to ${defaults_extra_file}"
    fi

    # Setup connection string
    connection=()
    for item in defaults_extra_file host port user database ; do
        if [[ -n "${!item:-}" ]]; then
          connection+=("--${item//_/-}=${!item}")
        fi
    done

    connection_no_db=()
    for item in defaults_extra_file host port user ; do
        if [[ -n "${!item:-}" ]]; then
          connection_no_db+=("--${item//_/-}=${!item}")
        fi
    done
}

parse_options "${@}"

# TODO: add `--save-local DIR` to specify a local directory to keep a local copy as well as uploading to the DEST (don't delete local after upload)
usage() {
    echoerr "Usage: ${0} [GLOBAL_OPTIONS] [OPTIONS] SOURCE DATABASE [NEW_DATABASE]"
    echoerr "Global Options: (where possible these options match mysql options)"
    echoerr "    -h|--host    host to connect to"
    echoerr "    -P|--port    post to connect to"
    echoerr "    -u|--user    user to connect with"
    echoerr "    -D|--database    database to connect to"
    echoerr "    -p|--password    password to connection to (not recommended. Use password-file)"
    echoerr "    --password-file    password file to read password from"
    echoerr ""
    echoerr "Options:"
    echoerr "    --compression    auto|gzip|lz4|bz2|none"
    echoerr "    --date-format    %Y%m%d%H%M%S"
    echoerr "    --checksum    sha256"
    echoerr "    --umask    0077"
    echoerr "    --sed"
    echoerr ""
    echoerr "    SOURCE    Source to load database dumps from. s3://, gs:// and files are supported."
    echoerr "    DATABASE    database to load to."
    echoerr "    NEW_DATABASE    database to load to."
    echoerr ""
    echoerr "Environment variables:"
    echoerr "    Any global options can be prefixed with DATABASE_ and specified via environment variable."
    echoerr "    Any save command options can be prefixed with LOAD_ and specified via environment variable."
}

case "${#args[@]}" in
  0|1)
    echo "error: ${#args[@]} ARGS"
    exit 1
    ;;
  2)
    source="${args[0]}"
    src_database="${args[1]}"
    dest_database="${args[1]}"
    ;;
  3)
    source="${args[0]}"
    src_database="${args[1]}"
    dest_database="${args[2]}"
    ;;
  *)
    echo "Unknown"
    exit 1
    ;;
  esac

echo "Source:  ${source}"
echo "SRC DB:  ${src_database}"
echo "DEST DB: ${dest_database}"

# Set the umask, umask defaults to 0077 to keep files private during db dumping 
umask "${umask:-0077}"

date="$(date --utc "+${date_format:-%Y%m%d%H%M%S}")"

case "${source}" in
    gs://*)
        echo ">> gsutil"
        ls_cmd=( "gsutil" "ls" )
        fetch_cmd=( "gsutil" "cp" )
        src_type="gs"
        gsutil_auth
        ;;
    s3://*)
        echo ">> aws s3"
        ls_cmd=( "aws" "s3" "ls" )
        fetch_cmd=( "aws" "s3" "cp" )
        src_type="s3"
        ;;
    file://*|/*|./*)
        echo ">> file"
        ls_cmd=( "ls" )
        fetch_cmd=( "cat" )
        source="${source#file:\/\/}"
        src_type="file"
        ;;
    *)
        echoerr "Unknown destination protocol"
        exit 1
        ;;
    esac

# FIND
latest="$("${ls_cmd[@]}" "${source}" | sed -E -e '/[0-9]{14}/!d' -e 's/.*([0-9]{14})\/$/\1/' | sort | tail -n1)"
echo "Latest: ${latest}"

file="$("${ls_cmd[@]}" "${source}/${latest}/" | sed -E -e 's/.*[\/ ]([^\/]*)$/\1/' | grep "^${src_database}[\.\-]" || true)"
if [[ -z "${file}" ]]; then
  echo "No import found"
  exit 1
fi
echo "File: ${file}"

if [[ "${compression:-auto}" == "auto" ]]; then
  case "${file##*.}" in
    "lz4")
      compression="lz4"
      ;;
    "gz")
      compression="gzip"
      ;;
    "bz2")
      compression="bz2"
      ;;
    "zip")
      compression="zip"
      ;;
    "sql"|"dump"|"pgdump"|"pg_dump")
      compression="none"
      ;;
    *)
      echo "Unknown file expression, please define compression used or compression=none"
      exit 1
      ;;
    esac
fi

# Output compression
case "${compression}" in
    "gzip")
        file_ext+=( ".gz" )
        compression_cmd=( "gzip" "--fast" "-d" )
        ;;
    "lz4")
        file_ext+=( ".lz4" )
        compression_cmd=( "lz4" "-c" "-d" )
        ;;
    "bz2"|"bzip2")
        file_ext+=( ".bz2" )
        compression_cmd=( "bzip2" "-c" "-d" )
        ;;
    "zip")
        echoerr "ZIP not implement"
        exit 1
        ;;
    "none")
        compression_cmd=( "cat" )
        ;;
    *)
        echoerr "Unknown compressions method"
        exit 1
        ;;
    esac

# Process sed filters
sed_cmd=()
for item in "${sed[@]}"; do
  sed_cmd+=( "-e" "${item}" )
done

wait_mariadb "${host}" "${port:-3306}"

set -x

/usr/bin/mysql "${connection[@]}" -rs -e "DROP DATABASE IF EXISTS ${dest_database}; CREATE DATABASE ${dest_database}"

if [[ "${#sed_cmd[@]}" -gt 0 ]]; then
  "${fetch_cmd[@]}" "${source}/${latest}/${file}" "-" | "${compression_cmd[@]}" | sed -E "${sed_cmd[@]}" | /usr/bin/mysql "${connection_no_db[@]}" "${dest_database}"
else
  "${fetch_cmd[@]}" "${source}/${latest}/${file}" "-" | "${compression_cmd[@]}" | /usr/bin/mysql "${connection_no_db[@]}" "${dest_database}"
fi
